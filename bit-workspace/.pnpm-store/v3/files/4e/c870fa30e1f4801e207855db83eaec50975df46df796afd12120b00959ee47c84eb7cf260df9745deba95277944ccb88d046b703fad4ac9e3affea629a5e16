"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VitestTester = void 0;
/* eslint-disable max-classes-per-file */
const fs_extra_1 = require("fs-extra");
const comlink_1 = require("comlink");
const dependency_resolver_1 = require("@teambit/dependency-resolver");
const package_json_1 = __importDefault(require("vitest/package.json"));
const node_utils_esm_loader_1 = __importDefault(require("@teambit/node.utils.esm-loader"));
const utils_1 = require("./utils");
require.resolve('jsdom');
require.resolve('@vitest/coverage-v8');
const getVitest = async () => {
    const path = require.resolve('vitest/node');
    const vitest = await (0, node_utils_esm_loader_1.default)(path);
    return vitest;
};
class VitestTester {
    constructor(id, configPath, vitestWorker, logger, depResolver, opts = {}) {
        this.id = id;
        this.configPath = configPath;
        this.vitestWorker = vitestWorker;
        this.logger = logger;
        this.depResolver = depResolver;
        this.opts = opts;
        this.displayName = 'Vitest';
    }
    static from(options) {
        const id = options.name || 'vitest-tester';
        return (context) => {
            const logger = context.createLogger(id);
            const worker = context.createWorker(id, require.resolve('./vitest.worker'));
            const depResolver = context.getAspect(dependency_resolver_1.DependencyResolverAspect.id);
            return new VitestTester(id, options.config, worker, logger, depResolver, options);
        };
    }
    version() {
        return package_json_1.default.version;
    }
    displayConfig() {
        return (0, fs_extra_1.readFileSync)(this.configPath, 'utf8');
    }
    async onTestRunComplete(callback) {
        this.onTestRunCompleteCb = callback;
    }
    async test(context) {
        const viteConfig = await (0, utils_1.getConfig)(this.configPath, context, this.depResolver, false);
        const filters = (0, utils_1.patternsToArray)(this.opts, context);
        viteConfig.test.include = filters;
        if (context.updateSnapshot) {
            viteConfig.test.update = true;
        }
        if (context.watch) {
            viteConfig.test.watch = true;
        }
        const { startVitest, VitestPackageInstaller } = await getVitest();
        // skip installation checks
        class CustomPackageInstaller extends VitestPackageInstaller {
            async ensureInstalled() {
                return true;
            }
        }
        const vitest = await startVitest('test', undefined, undefined, viteConfig, {
            packageInstaller: new CustomPackageInstaller()
        });
        if (context.watch) {
            // hold the process
            await new Promise(() => { });
        }
        await vitest.close();
        const files = vitest.state.getFiles();
        const errors = Array.from(vitest.state.errorsSet);
        const result = (0, utils_1.getResultFromFiles)(files, errors, this.opts, context);
        return result;
    }
    async watch(context) {
        const viteConfig = await (0, utils_1.getConfig)(this.configPath, context, this.depResolver, true);
        const filters = (0, utils_1.patternsToArray)(this.opts, context);
        viteConfig.test.include = filters;
        const workerApi = this.vitestWorker.initiate(context.ui
            ? { stdout: true, stderr: true, stdin: true }
            : { stdout: false, stderr: false, stdin: false });
        const onTestCompleteCb = (0, comlink_1.proxy)((files, errors) => {
            if (!this.onTestRunCompleteCb || !files)
                return;
            const tests = (0, utils_1.getResultFromFiles)(files || [], errors || [], this.opts, context);
            this.onTestRunCompleteCb(tests);
        });
        await workerApi.onTestComplete(onTestCompleteCb);
        await workerApi.watch(viteConfig);
        return {};
    }
}
exports.VitestTester = VitestTester;
//# sourceMappingURL=vitest-tester.js.map