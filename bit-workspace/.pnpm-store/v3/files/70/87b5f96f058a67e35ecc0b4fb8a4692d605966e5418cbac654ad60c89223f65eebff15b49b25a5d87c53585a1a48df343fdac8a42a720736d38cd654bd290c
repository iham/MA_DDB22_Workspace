"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSnap = exports.isTag = exports.isHash = exports.LATEST_TESTED_MARK = exports.HASH_SIZE = void 0;
const semver_1 = __importDefault(require("semver"));
const exceptions_1 = require("./exceptions");
const version_1 = require("./version");
exports.HASH_SIZE = 40;
exports.LATEST_TESTED_MARK = '*';
function isLatest(versionStr) {
    return versionStr === version_1.LATEST_VERSION;
}
function isLatestTested(versionStr) {
    if (!versionStr.includes(exports.LATEST_TESTED_MARK))
        return false;
    const splited = versionStr.split(exports.LATEST_TESTED_MARK);
    if (splited.length !== 2)
        return false;
    const [, numberStr] = splited;
    const version = isRegular(numberStr);
    if (!version)
        return false;
    return true;
}
function isRegular(versionStr) {
    return semver_1.default.valid(versionStr);
}
function returnRegular(versionStr) {
    return new version_1.Version(versionStr, false);
}
function returnLatestTestedVersion(versionStr) {
    const [, numberStr] = versionStr.split(exports.LATEST_TESTED_MARK);
    return new version_1.Version(numberStr, true);
}
function returnLatest() {
    return new version_1.Version(null, true);
}
function returnSnap(hash) {
    return new version_1.Version(hash, false);
}
function convertToSemVer(versionStr) {
    return returnRegular(`0.0.${versionStr}`);
}
function isHash(str) {
    return typeof str === 'string' && str.length === exports.HASH_SIZE;
}
exports.isHash = isHash;
/**
 * a component version can be a tag (semver) or a snap (hash)
 */
function isTag(str) {
    return !isHash(str);
}
exports.isTag = isTag;
/**
 * a component version can be a tag (semver) or a snap (hash)
 */
function isSnap(str) {
    return isHash(str);
}
exports.isSnap = isSnap;
function versionParser(versionStr) {
    if (!versionStr)
        return returnLatest();
    if (typeof versionStr === 'string' && isLatest(versionStr))
        return returnLatest();
    if (typeof versionStr === 'string' && isLatestTested(versionStr))
        return returnLatestTestedVersion(versionStr);
    if (typeof versionStr === 'string' && isRegular(versionStr))
        return returnRegular(versionStr);
    if (typeof versionStr !== 'string' && Number.isInteger(versionStr))
        return convertToSemVer(versionStr);
    // @ts-ignore
    if (isHash(versionStr))
        return returnSnap(versionStr);
    throw new exceptions_1.InvalidVersion(versionStr.toString());
}
exports.default = versionParser;
//# sourceMappingURL=version-parser.js.map